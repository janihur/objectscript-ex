Include OSEX.ipm.demo.Macros

/// <p>A simple demo application illustrating basic IPM functionality.</p>
/// <example>
/// set demo = ##class(OSEX.ipm.demo.Main).%New()
/// do demo.Config("OSEX.ipm.numbers.Random", 100)
/// do demo.Run()
/// </example>
Class OSEX.ipm.demo.Main Extends %RegisteredObject
{

Property numberGenerator [ Private ];

Method %OnNew() As %Status
{
	#dim numberGenerator as %String = $get(^OSEX.ipm.demo("settings", "numberGenerator"))
	if (numberGenerator '= "") {
		set ..numberGenerator = ..createNumberGenerator(numberGenerator)
	}
	return $$$OK
}

/// <p>A very sophisticated configuration method.</p>
Method SetNumberGenerator(
	numberGenerator As %String,
	args...)
{
	if (numberGenerator '= "") {
		set ..numberGenerator = ..createNumberGenerator(numberGenerator, args...)
	} else {
		set ..numberGenerator = $$$NULLOREF
		kill ^OSEX.ipm.demo("settings", "numberGenerator")
	}
}

/// <p>A very sophisticated configuration method.</p>
ClassMethod SetDefaultName(name As %String)
{
	if (name '= "") {
		set ^OSEX.ipm.demo("settings", "defaultName") = name
	} else {
		kill ^OSEX.ipm.demo("settings", "defaultName")
	}
}

/// <p>A very sophisticated configuration method.</p>
ClassMethod SetInstallDir(dir As %String)
{
	if (dir '= "") {
		set ^OSEX.ipm.demo("settings", "installDir") = dir
	} else {
		kill ^OSEX.ipm.demo("settings", "installDir")
	}
}

/// <p>A very sophisticated general purpose configuration method.</p>
ClassMethod SetSetting(
	key As %String,
	value As %String)
{
	if (key '= "") {
		set ^OSEX.ipm.demo("settings", key) = value
	} else {
		kill ^OSEX.ipm.demo("settings", key)
	}
}

/// <p>Remove all configuration. The main use is for module's Unconfigure phase.</p>
ClassMethod Unconfigure()
{
	do ..SetDefaultName("")
	do ..SetInstallDir("")
	kill ^OSEX.ipm.demo("settings", "numberGenerator")
	// these are (optionally) set by the resource processor
	do ..SetSetting("foo", "")
	do ..SetSetting("bar", "")
}

ClassMethod createNumberGenerator(
	numberGenerator As %String,
	args...) [ Private ]
{
	try {
		return $classmethod(numberGenerator, "%New", args...)
	} catch ex {
		write "Error: ", "Number generator creation failure: ", numberGenerator, !
		write "Error: ", ex.DisplayString(), !
		return $$$NULLOREF
	}
}

Method Run(name As %String = "")
{
	if (name = "") {
		set name = $get(^OSEX.ipm.demo("settings", "defaultName"), "World")
	}

	write ##class(OSEX.ipm.hello.Hello).Hello(name),!

	write "In this universe TRUE = ", $$$TRUE, " and FALSE = ", $$$FALSE, " (a macro test).", !

	if ($isobject(..numberGenerator)) {
		#dim n as %Integer = 0
		#dim text as %String = ""
		if (..numberGenerator.%IsA("OSEX.ipm.numbers.Random")) {
			set n = ..numberGenerator.Rand()
			set text = "random"
		}elseif (..numberGenerator.%IsA("OSEX.ipm.numbers.Fibonacci")) {
			#dim nth as %Integer = ##class(OSEX.ipm.numbers.Random).%New(100).Rand()
			set n = ..numberGenerator.Fib(nth)
			set text = "Fibonacci"
		}else {
			// unsupported number generator
			set text = "default"
		}
		write "Your number is ", n, ". Generated by ", text, " number generator.", !
	}
}

}
